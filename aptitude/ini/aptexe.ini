# Sample configuration file for Aptitude Executor

[Main]
Threads = 3
#Execution start delay in seconds (for development only)
Delay = 0

#Bus timeout in seconds
Bus Timeout = 10

[BerkeleyDB]
# replication enabled? [Yes|No]
Replication = No
# role in replication group [Master|Client|Election]
Role = Client
# priority. higher number means the client is more likely elected a new master.
Priority = 98
# election delay time
StartElectionTimeout = 30
# local port. Each replication group member needs to listen on one specified port.
ReplicationAddress = localhost:59212

# addresses of other replication group members.
[ReplicationPeers]
#peer1 = localhost:59211
#peer2 = localhost:59213

[Recording]
# a path to a directory where data is recorded
Directory = ../recording
# maximum amount of recorded files
MaxFileNumber = 16

[ExecutionLog]
# Enables/disables the functionality.
# Allowed values: [1 | 0]
# Default value: 0
Enabled = 0
# Enables/disables creating statistics.
# Allowed values: [1 | 0]
EnableStatistics = 0
# Enables/disables particular levels of messages
# Allowed values: [ -a | -n<level> | -d<level> | -r<level_from>-<level_to> ]
#    -a - enables all levels
#    -n<level> - enables particular level <level>, e.g. -d102  enables level 102
#    -d<level> - disables particular level <level>, e.g. -d102 disables level 102
#    -r<level_from>-<level_to> - enables range of levels from level <level_from> to level <level_to>, e.g. -r100-102 enables levels 100,101,102
# Default value: -n199
Levels = -n199

[Log]
# connection type to the logging server [server|file]
Type = file
# logging server host
LogHost = localhost
# server port
Port = 20009
# interval (in seconds) at which maximum logfile size is checked, otherwise logfile size can grow indefinitely
Interval = 60
# max log file size (in KB)
MaxLogFileSize = 1000
# max log file number
MaxLogFileNumber = 10

[BusinessAudit]
# Where Business Audit events are to be stored; acceptable values are: Log or File.
# The default value is Log. It is also recommended to set [Log] type to "server".
Storage = Log
#
# If Storage=File, specify the path of the file where Business Audit events are to be written.
# There is no default value for the entry.
#File = "business_audit.log"
# You can also provide the directory where the file is to be stored, e.g.:
#File = "../log/business_audit.log"

[Internal Data]
# Storing internal data in external databases.
# If to compress stored messages.
Compress = 1
# Metadata tables/sequences - global.
# Common to many projects working with the same external database.
# If to create
Create meta data = 1
# If to throw CRITICAL ERROR in case of an error
# meaning table or sequence already exists
Create meta data error throws CRITICAL ERROR = 0
# Data tables/sequences - project specific.
# Specific to a given project and node.
# If to create
Create data tables = 1
# If to throw CRITICAL ERROR in case of an error
# meaning table or sequence already exists
Create data tables error throws CRITICAL ERROR = 0

[ExecutionParameters]
# Backward compatibility - force marking input events as failed 
# even if the error output is used. Default is 0.
MarkErrorOutputEventsAsFailed = 0

# Backward compatibility - if an error occurs in Optimistic Mode -
# sets Transactional Batch Size to 1 and reprocesses failed batch. Default is 1.
ReduceTBSInOptimisticMode = 1

[ExternalLibrary]
standard adaptor name = ../lib/libextlib_adaptor_std.so

[ExternalLibrary-Debug]
standard adaptor name = ../lib/libextlib_adaptor_std.so

[WebService]
plugin name = ../lib/libsoap_exe.so

[WebService-Debug]
plugin name = ../lib/libsoap_exe.so

[Plugins]
## Each key must start with "load" string.
## Each key must be unique.
## If there are some plugins with the same keys (say load_1= plugin1 and load_1 = plugin2) then only one plugin will be loaded.

## uncomment when want to use Db2
#load_dbDet_DB2          = ../lib/libdbDetails_DB2_viaODBC.so
#load_dbAcc_DB2_aa       = ../lib/libdbAccess_DB2_viaODBCaa.so
## uncomment when want to use Oracle
load_dbDet_Oracle       = ../lib/libdbDetails_Oracle_viaOCI.so
load_dbAcc_Oracle_aa    = ../lib/libdbAccess_Oracle_viaOCIaa.so
load_dbAcc_Oracle_au    = ../lib/libdbAccess_Oracle_viaOCIau.so
load_dbAcc_Oracle_uu    = ../lib/libdbAccess_Oracle_viaOCIuu.so
## uncomment when want to use ODBC
#load_dbDet_ODBC         = ../lib/libdbDetails_ODBC.so
#load_dbAcc_ODBC         = ../lib/libdbAccess_ODBC.so
## uncomment when want to use SAP Hana via ODBC
#load_dbDet_Hana_viaODBC    = ../lib/libdbDetails_Hana_viaODBC.so
#load_dbAcc_Hana_viaODBC_aa = ../lib/libdbAccess_Hana_viaODBCaa.so
#load_dbAcc_Hana_viaODBC_uu = ../lib/libdbAccess_Hana_viaODBCuu.so
## uncomment when want to use Teradata CLI
#load_dbDet_Teradata_viaCLI = ../lib/libdbDetails_Teradata_viaCLI.so
#load_dbAcc_Teradata_viaCLI_aa = ../lib/libdbAccess_Teradata_viaCLIaa.so
#load_dbAcc_Teradata_viaCLI_uu = ../lib/libdbAccess_Teradata_viaCLIuu.so
## uncomment when want to use Teradata ODBC
#load_dbDet_Teradata_viaODBC    = ../lib/libdbDetails_Teradata_viaODBC.so
#load_dbAcc_Teradata_viaODBC_aa = ../lib/libdbAccess_Teradata_viaODBCaa.so
#load_dbAcc_Teradata_viaODBC_uu = ../lib/libdbAccess_Teradata_viaODBCuu.so
## uncomment when want to use Teradata Parallel Transporter (TPT)
#load_dbDet_Teradata_viaTPT = ../lib/libdbDetails_Teradata_viaTPT.so
#load_dbAcc_Teradata_viaTPT = ../lib/libdbAccess_Teradata_viaTPT.so
## uncomment when want to use Netezza
#load_dbDet_Netezza_viaODBC = ../lib/libdbDetails_Netezza_viaODBC.so
#load_dbAcc_Netezza_viaODBC = ../lib/libdbAccess_Netezza_viaODBC.so 
## uncomment when want to use Hadoop Hive via ODBC
#load_dbDet_HadoopHive_viaODBC = ../lib/libdbDetails_HadoopHive_viaODBC.so
#load_dbAcc_HadoopHive_viaODBC = ../lib/libdbAccess_HadoopHive_viaODBC.so
## uncomment when want to use Hadoop Impala via ODBC
#load_dbDet_HadoopImpala_viaODBC = ../lib/libdbDetails_HadoopImpala_viaODBC.so
#load_dbAcc_HadoopImpala_viaODBC = ../lib/libdbAccess_HadoopImpala_viaODBC.so

## adaptors to: database objects
load_db_comp            = ../lib/libesa_db_comp.so
load_db_exe             = ../lib/libesa_db_exe.so
## adaptors to: stream objects (XML for instance)
load_stream_comp        = ../lib/libesa_xml_format_comp.so
load_stream_exe         = ../lib/libesa_xml_format_exe.so
## adaptors to: file objects
load_file_format_comp   = ../lib/libesa_flat_file_format_comp.so
load_file_device_comp   = ../lib/libesa_file_device_comp.so
load_file_format_exe    = ../lib/libesa_flat_file_format_exe.so
load_file_device_exe    = ../lib/libesa_file_device_exe.so
## adaptors to: external systems via FTP
load_ftp_device_comp    = ../lib/libesa_ftp_device_comp.so
load_ftp_device_exe     = ../lib/libesa_ftp_device_exe.so
## adaptors to: mq objects
#load_mq_comp            = ../lib/libesa_mq_device_comp.so
#load_mq_exe             = ../lib/libesa_mq_device_exe.so
## adaptors to: external libraries objects
#load_extlib_comp        = ../lib/libesa_extlib_comp.so
#load_extlib_exe         = ../lib/libesa_extlib_exe.so
## adaptors to: plugin device objects
#load_plugindevice_comp  = ../lib/libesa_plugin_device_comp.so
#load_plugindevice_exe   = ../lib/libesa_plugin_device_exe.so
## adaptors to: email objects
#load_email_comp         = ../lib/libesa_email_comp.so
#load_email_exe          = ../lib/libesa_email_exe.so
## adaptors to: reporting objects
#load_reporting_comp     = ../lib/libesa_reporting_comp.so
#load_reporting_exe      = ../lib/libesa_reporting_exe.so
## adaptors to: SAP objects
#load_sap_comp           = ../lib/libesa_sap_comp.so
#load_sap_exe            = ../lib/libesa_sap_exe.so
## adaptors to: iWay objects
#load_iWay_comp          = ../lib/libesa_iWay_comp.so
#load_iWay_exe           = ../lib/libesa_iWay_exe.so
## adaptors to: Java/Coherence objects
#load_java_comp          = ../lib/libesa_java_comp.so
#load_java_exe           = ../lib/libesa_java_exe.so
## adaptors to: HDFS objects
#load_hdfs_comp          = ../lib/libesa_hdfs_device_comp.so
#load_hdfs_exe           = ../lib/libesa_hdfs_device_exe.so

[Plugins-Debug]
## Each key must start with "load" string.
## Each key must be unique.
## If there are some plugins with the same keys (say load_1= plugin1 and load_1 = plugin2) then only one plugin will be loaded.

## uncomment when want to use DB2
#load_dbDet_DB2          = ../lib/libdbDetails_DB2_viaODBC.so
#load_dbAcc_DB2_aa       = ../lib/libdbAccess_DB2_viaODBCaa.so
## uncomment when want to use Oracle
#load_dbDet_Oracle       = ../lib/libdbDetails_Oracle_viaOCI.so
#load_dbAcc_Oracle_aa    = ../lib/libdbAccess_Oracle_viaOCIaa.so
#load_dbAcc_Oracle_au    = ../lib/libdbAccess_Oracle_viaOCIau.so
#load_dbAcc_Oracle_uu    = ../lib/libdbAccess_Oracle_viaOCIuu.so
## uncomment when want to use ODBC
#load_dbDet_ODBC         = ../lib/libdbDetails_ODBC.so
#load_dbAcc_ODBC         = ../lib/libdbAccess_ODBC.so
## uncomment when want to use SAP Hana via ODBC
#load_dbDet_Hana_viaODBC    = ../lib/libdbDetails_Hana_viaODBC.so
#load_dbAcc_Hana_viaODBC_aa = ../lib/libdbAccess_Hana_viaODBCaa.so
#load_dbAcc_Hana_viaODBC_uu = ../lib/libdbAccess_Hana_viaODBCuu.so
## uncomment when want to use Teradata CLI
#load_dbDet_Teradata_viaCLI = ../lib/libdbDetails_Teradata_viaCLI.so
#load_dbAcc_Teradata_viaCLI_aa = ../lib/libdbAccess_Teradata_viaCLIaa.so
#load_dbAcc_Teradata_viaCLI_uu = ../lib/libdbAccess_Teradata_viaCLIuu.so
## uncomment when want to use Teradata ODBC
#load_dbDet_Teradata_viaODBC    = ../lib/libdbDetails_Teradata_viaODBC.so
#load_dbAcc_Teradata_viaODBC_aa = ../lib/libdbAccess_Teradata_viaODBCaa.so
#load_dbAcc_Teradata_viaODBC_uu = ../lib/libdbAccess_Teradata_viaODBCuu.so
## uncomment when want to use Teradata Parallel Transporter (TPT)
#load_dbDet_Teradata_viaTPT = ../lib/libdbDetails_Teradata_viaTPT.so
#load_dbAcc_Teradata_viaTPT = ../lib/libdbAccess_Teradata_viaTPT.so
## uncomment when want to use Netezza
#load_dbDet_Netezza_viaODBC = ../lib/libdbDetails_Netezza_viaODBC.so
#load_dbAcc_Netezza_viaODBC = ../lib/libdbAccess_Netezza_viaODBC.so
## uncomment when want to use Hadoop Hive via ODBC
#load_dbDet_HadoopHive_viaODBC = ../lib/libdbDetails_HadoopHive_viaODBC.so
#load_dbAcc_HadoopHive_viaODBC = ../lib/libdbAccess_HadoopHive_viaODBC.so
## uncomment when want to use Hadoop Impala via ODBC
#load_dbDet_HadoopImpala_viaODBC = ../lib/libdbDetails_HadoopImpala_viaODBC.so
#load_dbAcc_HadoopImpala_viaODBC = ../lib/libdbAccess_HadoopImpala_viaODBC.so

## adaptors to: database objects
load_db_comp            = ../lib/libesa_db_comp.so
load_db_exe             = ../lib/libesa_db_exe.so
## adaptors to: stream objects (XML for instance)
load_stream_comp        = ../lib/libesa_xml_format_comp.so
load_stream_exe         = ../lib/libesa_xml_format_exe.so
## adaptors to: file objects
load_file_format_comp   = ../lib/libesa_flat_file_format_comp.so
load_file_device_comp   = ../lib/libesa_file_device_comp.so
load_file_format_exe    = ../lib/libesa_flat_file_format_exe.so
load_file_device_exe    = ../lib/libesa_file_device_exe.so
## adaptors to: external systems via FTP
load_ftp_device_comp    = ../lib/libesa_ftp_device_comp.so
load_ftp_device_exe     = ../lib/libesa_ftp_device_exe.so
## adaptors to: mq objects
#load_mq_comp            = ../lib/libesa_mq_device_comp.so
#load_mq_exe             = ../lib/libesa_mq_device_exe.so
## adaptors to: external libraries objects
#load_extlib_comp        = ../lib/libesa_extlib_comp.so
#load_extlib_exe         = ../lib/libesa_extlib_exe.so
## adaptors to: plugin device objects
#load_plugindevice_comp  = ../lib/libesa_plugin_device_comp.so
#load_plugindevice_exe   = ../lib/libesa_plugin_device_exe.so
## adaptors to: email objects
#load_email_comp         = ../lib/libesa_email_comp.so
#load_email_exe          = ../lib/libesa_email_exe.so
## adaptors to: reporting objects
#load_reporting_comp     = ../lib/libesa_reporting_comp.so
#load_reporting_exe      = ../lib/libesa_reporting_exe.so
## adaptors to: SAP objects
#load_sap_comp           = ../lib/libesa_sap_comp.so
#load_sap_exe            = ../lib/libesa_sap_exe.so
## adaptors to: iWay objects
#load_iWay_comp          = ../lib/libesa_iWay_comp.so
#load_iWay_exe           = ../lib/libesa_iWay_exe.so
## adaptors to: Java/Coherence objects
#load_java_comp          = ../lib/libesa_java_comp.so
#load_java_exe           = ../lib/libesa_java_exe.so
## adaptors to: HDFS objects
#load_hdfs_comp          = ../lib/libesa_hdfs_device_comp.so
#load_hdfs_exe           = ../lib/libesa_hdfs_device_exe.so

[Networking]
# Options for tuning socket and networking parameters
; tcp_nodelay = 0
; so_rcvbuf = 65536
; so_sndbuf = 65536
; tcp_cork = 0
; input_buffer_size = 1700
; output_buffer_size = 1024
; so_keepalive = 1
; tcp_keepidle = 240
; tcp_keepintvl = 240
; tcp_keepcnt = 9
; app_keepalive_interval = 3600
