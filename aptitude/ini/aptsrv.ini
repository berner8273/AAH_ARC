# Sample configuration file for Aptitude Server

[Main]
# listening port for clients
studio-server port = 2500
# listening port for engine servers
server-engine port = 2501
# the name of the server
Server Name = Aptitude Server
# type of server [development|testing|production]
Server Type = development
# watchdog turn delay in seconds (recommended 300 secs = 5 mins)
WatchDog delay = 300
# Maximum number of project instances that may be configured
MaxProjectInstances = 100
# If to check syntax of XML describing configuration definitions when loaded with aptcmd
CheckConfigurationDefinitionDuringLoad = 0
# Uncomment to order Aptitude Server to register on the BUS Server in order to allow manipulating metamodel objects (e.g. start/stop projects) via Aptitude Metamodel API - please see APi User Manual for details.
ConnectToBuses=1
ConnectToBusesInterval=30
# The number of threads for a single bus listener. Having external projects running via bus, if those register in the bus, at least 2 threads are required. Otherwise, it can be reduced to 1 thread to save the overall pool of threads.
#AptbusListenerThreads = 2


# server-server connection timeouts 
[Timeouts]
# timeout on Project execution startup. Default = 90s. Increase the timeout when the project execution startup is prolonged.
Project startup timeout = 90
# timeout during debugging. Default - 3600s (1h).
Debugger timeout = 3600
# timeout on attempts to acquire project exclusive lock.  Default = 15s.
Lock timeout = 15
# timeout on heartbeat messages transmitted between Studio and Server (in seconds)
#Studio heartbeat timeout = 30

[BerkeleyDB]
# a path to the local server repository
Path = ../db/server

# The size, calculated as a 2 to the power of byte_cache_size, of the shared memory buffer pool – the cache. 
byte_cache_size = 29
# The maximum number of locks supported by the Berkeley DB environment. 
lk_max_locks = 100000
# The maximum number of locking entities supported by the Berkeley DB environment.
lk_max_lockers = 100000
# The maximum number of locked objects supported by the Berkeley DB environment.
lk_max_objects = 100000

# replication enabled? [Yes|No]
Replication = No
# role in replication group [Master|Client|Election]
Role = Client
# priority. higher number means the client is more likely elected a new master.
Priority = 98
# election delay time
StartElectionTimeout = 30
# local port. Each replication group member needs to listen on one specified port.
ReplicationAddress = localhost:59112

[SQLiteRepository]
# a path to the local sqlite server repository
Path = ../db/server_sqlite/repository.db
SnapshotIsolation = 1

# addresses of other replication group members.
[ReplicationPeers]
#peer1 = localhost:59111
#peer2 = localhost:59113

[Log]
# connection kind to the logging server [server|file]
Type = file
# logging server host
LogHost = localhost 
# server port
Port = 20009 

# interval (in seconds) at which maximum logfile size is checked, otherwise logfile size can grow indefinitely
Interval = 60 
# max log file size (in KB).When berkeley DB is used, size of log is approximated by number of rows multiplied by 100 bytes.
MaxLogFileSize = 100000
# when size specified above is reached, the log file (or DB content) is backed up into the backup directory
# backup directory
BackupDir = ../backup/server
# max log files count in backup directory
MaxLogFileNumber = 10

# if type set to server, "Common Logs" are used (logs, user audit, business audit together).
# in this mode logs can be stored in berkeley DB, file or both
# possible values
# berkeley, file, dual. Default is "dual"- which means berkeley storage with file mirroring.
CommonLogStorage = dual
# polling interval for storage in seconds. The records are flushed into file or DB in this interval.
CommonLogPollerInterval = 1
# if the poller's queue is full, it can suspend the writing process if the following parameter is "1"
# otherwise this situation causes poller to be shut down, so no further logs will be written to database, but only to file
CommonLogCanWaitForPoller = 0

# minimal numeric level of logs to be handled. Lower will be ignored. 
# Possible values between 1 and 99. Default 50.
LogMinLevel = 50
# alternatively to the last one: available logs levels, specified in trace-like manner.
# LogLevels = -a

# connecting to external database, for common log additional storage
#Store the logs in a table apt_logs (default 1)
; ExtDBLogUseLogsTable = 1
#Store the state of processes in database tables (default 0)
; ExtDBLogUseStateTable = 0

; ExtDBType=ORACLE
; ExtDBName =
; ExtDBServerName =orcl
; ExtBDUserName =apt_log
# Database password for the user in open text - may be used but it is not recommended due to security reasons
; ExtDBPassword =apt_log
# Database passwords file - points to a file containing encrypted passwords. Notice that 'Password' and 'EncodedPasswordFile' should not be defined simultanously
; ExtDBPasswordFile = D:\Projects\Aptitude\Current\server\Debug\password.txt
#Log Type - possible options: BA - Business Audit, LOG - Log, UA - User Activity Audit, All (could be combined, separated by comma e.g. ExtDBLogType = UA, BA) 
; ExtDBLogType = All
#Log Source - possible options: SRV, ENG, EXE, BUS, WS, All (could be combined, separated by comma e.g. ExtDBLogSource = SRV, EXE) 
; ExtDBLogSource = All
#Log Prority - possible options: ER - Error, Wa - Warning, In - Info, All (could be combined, separated by comma e.g. ExtDBLogPriority = ER, WA) 
; ExtDBLogPriority = All
#Log Levels - specified in trace-like manner, e.g. ExtDBLogLevels = -r51-67
; ExtDBLogLevels = -a
#ExtDBLogMaxBufferSize - size of the buffer used in communication with the external database, default is 1000
; ExtDBLogMaxBufferSize = 1000
#ExtDBLogUseAutoCommit - if to use autocommit set to 0 if necessary (required for Teradata using ODBC)
; ExtDBLogUseAutoCommit = 1


[Security]
MainCertificate = ../ini/aptsrv.pem
MainCertificatePKey = ../ini/aptsrvkey.pem
Licence = ../ini/aptitude.apl

MaxDaysPasswordValid = 180
MinPasswordHistoryLength = 5
MinDaysPasswordInHistory = 180

MinPasswordLength       = 8
RequireCapitalLetter    = 1
RequireNonCapitalLetter = 1
RequireDigit            = 0
RequireDigitInside      = 0

MinutesBlockLoginAfterFailures3 = 0
MinutesBlockLoginAfterFailures6 = 0
MinutesBlockLoginAfterFailures9 = 0

MaxLoginFailures = 0

# enables OS Authentication functionality: 0 - disabled, 1 - enabled (default: 0)
OSAuthenticationEnabled = 1
# specifies OS Authentication prefix string added to the OS username (default: "os$")
OSAuthenticationPrefix = "os$"

# number of days of inactivity before the user's account is locked
#AutomaticUserDeactivation = 30

[LicenceAlert]
# ; (semicolon) separated list (use no spaces!) - uncomment when want to use LicenceAlert (smtp account settings and recipients should be defined properly)
# recipients = user1@domain1;user2@domain2
#daysToExpiry = 0
# smtp account settings
#senderName = user
#senderPasswd = passwd
#senderEmail = user@domain
#senderServer = server.group
# encryption enumerations: 0 - None, 1 - SSL, 2 - TLS
encryption = 0
msgSubject = Licence Alert
# use | as new lines
msgBody = Attention!||Aptitude Server gives the following warning(s) checking its licence:|

[Plugins]
## Each key must start with "load" string.
## Each key must be unique.
## If there are some plugins with the same keys (say load_1= plugin1 and load_1 = plugin2) then only one plugin will be loaded.

## uncomment when want to use DB2
#load_dbDet_DB2          = ../lib/libdbDetails_DB2_viaODBC.so
## uncomment when want to use Oracle
load_dbDet_Oracle       = ../lib/libdbDetails_Oracle_viaOCI.so
## uncomment when want to use ODBC
#load_dbDet_ODBC         = ../lib/libdbDetails_ODBC.so
## uncomment when want to use SAP Hana via ODBC
#load_dbDet_Hana_viaODBC = ../lib/libdbDetails_Hana_viaODBC.so
## uncomment when want to use Teradata ODBC
#load_dbDet_Teradata_viaODBC = ../lib/libdbDetails_Teradata_viaODBC.so
## uncomment when want to use Teradata Teradata Parallel Transporter (TPT)
#load_dbDet_Teradata_viaTPT = ../lib/libdbDetails_Teradata_viaTPT.so
## uncomment when want to use Teradata CLI
#load_dbDet_Teradata_viaCLI = ../lib/libdbDetails_Teradata_viaCLI.so
## uncomment when want to use Netezza
#load_dbDet_Netezza_viaODBC = ../lib/libdbDetails_Netezza_viaODBC.so
## uncomment when want to use Hadoop Hive via ODBC
#load_dbDet_HadoopHive_viaODBC = ../lib/libdbDetails_HadoopHive_viaODBC.so
## uncomment when want to use Hadoop Impala via ODBC
#load_dbDet_HadoopImpala_viaODBC = ../lib/libdbDetails_HadoopImpala_viaODBC.so

## adaptors to: database objects
load_db_comp            = ../lib/libesa_db_comp.so
load_db_vc              = ../lib/libesa_db_vc.so
## adaptors to: stream objects (XML for instance)
load_stream_comp        = ../lib/libesa_xml_format_comp.so
## adaptors to: file objects
load_file_format_comp   = ../lib/libesa_flat_file_format_comp.so
load_file_device_comp   = ../lib/libesa_file_device_comp.so
load_file_format_vc     = ../lib/libesa_flat_file_format_vc.so
load_file_device_vc     = ../lib/libesa_file_device_vc.so
## adaptors to: external systems via FTP
load_ftp_device_comp    = ../lib/libesa_ftp_device_comp.so
load_ftp_device_vc      = ../lib/libesa_ftp_device_vc.so
## adaptors to: mq objects
#load_mq_comp            = ../lib/libesa_mq_device_comp.so
## adaptors to: external libraries objects
#load_extlib_comp        = ../lib/libesa_extlib_comp.so
#load_extlib_vc          = ../lib/libesa_extlib_vc.so
## adaptors to: plugin device objects
#load_plugindevice_comp  = ../lib/libesa_plugin_device_comp.so
## adaptors to: email objects
#load_email_comp         = ../lib/libesa_email_comp.so
#load_email_vc           = ../lib/libesa_email_vc.so
## adaptors to: reporting objects
#load_reporting_comp     = ../lib/libesa_reporting_comp.so
## adaptors to: SAP objects
#load_sap_comp           = ../lib/libesa_sap_comp.so
#load_sap_vc             = ../lib/libesa_sap_vc.so
## adaptors to: iWay objects
#load_iWay_comp          = ../lib/libesa_iWay_comp.so
#load_iWay_vc            = ../lib/libesa_iWay_vc.so
## adaptors to: Java/Coherence objects
#load_java_comp          = ../lib/libesa_java_comp.so
#load_java_vc            = ../lib/libesa_java_vc.so
## adaptors to: HDFS objects
#load_hdfs_comp          = ../lib/libesa_hdfs_device_comp.so
#load_hdfs_vc            = ../lib/libesa_hdfs_device_vc.so

[Plugins-Debug]
## Each key must start with "load" string.
## Each key must be unique.
## If there are some plugins with the same keys (say load_1= plugin1 and load_1 = plugin2) then only one plugin will be loaded.

## uncomment when want to use DB2
#load_dbDet_DB2          = ../lib/libdbDetails_DB2_viaODBC.so
## uncomment when want to use Oracle
#load_dbDet_Oracle       = ../lib/libdbDetails_Oracle_viaOCI.so
## uncomment when want to use ODBC
#load_dbDet_ODBC         = ../lib/libdbDetails_ODBC.so
## uncomment when want to use SAP Hana via ODBC
#load_dbDet_Hana_viaODBC = ../lib/libdbDetails_Hana_viaODBC.so
## uncomment when want to use Teradata ODBC
#load_dbDet_Teradata_viaODBC = ../lib/libdbDetails_Teradata_viaODBC.so
## uncomment when want to use Teradata Teradata Parallel Transporter (TPT)
#load_dbDet_Teradata_viaTPT = ../lib/libdbDetails_Teradata_viaTPT.so
## uncomment when want to use Teradata CLI
#load_dbDet_Teradata_viaCLI = ../lib/libdbDetails_Teradata_viaCLI.so
## uncomment when want to use Netezza
#load_dbDet_Netezza_viaODBC = ../lib/libdbDetails_Netezza_viaODBC.so
## uncomment when want to use Hadoop Hive via ODBC
#load_dbDet_HadoopHive_viaODBC = ../lib/libdbDetails_HadoopHive_viaODBC.so
## uncomment when want to use Hadoop Impala via ODBC
#load_dbDet_HadoopImpala_viaODBC = ../lib/libdbDetails_HadoopImpala_viaODBC.so

## adaptors to: database objects
load_db_comp            = ../lib/libesa_db_comp.so
load_db_vc              = ../lib/libesa_db_vc.so
## adaptors to: stream objects (XML for instance)
load_stream_comp        = ../lib/libesa_xml_format_comp.so
## adaptors to: file objects
load_file_format_comp   = ../lib/libesa_flat_file_format_comp.so
load_file_device_comp   = ../lib/libesa_file_device_comp.so
load_file_format_vc     = ../lib/libesa_flat_file_format_vc.so
load_file_device_vc     = ../lib/libesa_file_device_vc.so
## adaptors to: external systems via FTP
load_ftp_device_comp    = ../lib/libesa_ftp_device_comp.so
load_ftp_device_vc      = ../lib/libesa_ftp_device_vc.so
## adaptors to: mq objects
#load_mq_comp            = ../lib/libesa_mq_device_comp.so
## adaptors to: external libraries objects
#load_extlib_comp        = ../lib/libesa_extlib_comp.so
#load_extlib_vc          = ../lib/libesa_extlib_vc.so
## adaptors to: plugin device objects
#load_plugindevice_comp  = ../lib/libesa_plugin_device_comp.so
## adaptors to: email objects
#load_email_comp         = ../lib/libesa_email_comp.so
#load_email_vc           = ../lib/libesa_email_vc.so
## adaptors to: reporting objects
#load_reporting_comp     = ../lib/libesa_reporting_comp.so
## adaptors to: SAP objects
#load_sap_comp           = ../lib/libesa_sap_comp.so
#load_sap_vc             = ../lib/libesa_sap_vc.so
## adaptors to: iWay objects
#load_iWay_comp          = ../lib/libesa_iWay_comp.so
#load_iWay_vc            = ../lib/libesa_iWay_vc.so
## adaptors to: Java/Coherence objects
#load_java_comp          = ../lib/libesa_java_comp.so
#load_java_vc            = ../lib/libesa_java_vc.so
## adaptors to: HDFS objects
#load_hdfs_comp          = ../lib/libesa_hdfs_device_comp.so
#load_hdfs_vc            = ../lib/libesa_hdfs_device_vc.so

[Networking]
# Options for tuning socket and networking parameters
; tcp_nodelay = 0
; so_rcvbuf = 65536
; so_sndbuf = 65536
; tcp_cork = 0
; input_buffer_size = 1700
; output_buffer_size = 1024
; so_keepalive = 1
; tcp_keepidle = 240
; tcp_keepintvl = 240
; tcp_keepcnt = 9
; app_keepalive_interval = 3600
