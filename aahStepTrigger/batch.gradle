import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import org.apache.tools.ant.filters.FixCrLfFilter;
import org.apache.tools.ant.filters.ReplaceTokens;

apply plugin: 'java'

final Path   PATH_TO_BATCH_BUILD_DIR         = Paths.get ( buildDir.toURI() ).resolve ( 'batch' ).resolve ( 'tmp' );
final Path   PATH_TO_BATCH_SCRIPTS_BUILD_DIR = PATH_TO_BATCH_BUILD_DIR.resolve ( 'scripts' );

sourceSets {
    batch {
        java {
            srcDir 'src/main/batch/java'
        }
        resources {
            srcDir 'src/main/batch/java'
        }
        compileClasspath+=fileTree(dir: "$projectDir/src/main/batch/lib" , include: '*.jar')
    }
}

compileBatchJava {
    targetCompatibility = 1.8
}

compileBatchJava.dependsOn clean

task batchJar ( type: Jar, dependsOn: [ compileBatchJava ] ){
    baseName = 'batch'
    from ( sourceSets.batch.output )
    from { sourceSets.batch.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from "${projectDir}/src/main/batch/resources/log4j.properties"
}

task prepareBatchScripts ( dependsOn: [ batchJar ] ) {
    doLast {
        copy {
            from    batchJar.archivePath
            into    PATH_TO_BATCH_SCRIPTS_BUILD_DIR.toFile()
        }

        final FileTree SCRIPT_TREE = fileTree ( dir : "$projectDir/src/main/batch/os/" , includes : [ '**/*.sh' ] );
        copy {
            from     SCRIPT_TREE
            into     PATH_TO_BATCH_SCRIPTS_BUILD_DIR.toFile()
            filter   ( ReplaceTokens , tokens: project.ext.properties )
            filter   ( ReplaceTokens , tokens: environmentProperties )
            filter   ( FixCrLfFilter.class , eol:FixCrLfFilter.CrLf.newInstance ( "lf" ) )
            fileMode 0700
        }
    }
}

task dropBatchScripts {
    doLast {
        Files.deleteIfExists ( Paths.get ( environmentProperties.pathToStepScript ).parent.resolve ( batchJar.archiveName ) );
        Files.deleteIfExists ( Paths.get ( environmentProperties.pathToStepScript ) );
    }
}

task deployBatchScripts ( dependsOn : prepareBatchScripts ) {
    doLast {
        copy {
            from PATH_TO_BATCH_SCRIPTS_BUILD_DIR.toFile ()
            into Paths.get ( environmentProperties.pathToStepScript ).parent.toFile ()
        }
    }
}